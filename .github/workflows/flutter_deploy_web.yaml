# Should be called on push to main
name: Flutter Web Deployment

on:
  # This line allows the workflow to be called by other workflows
  workflow_call:
    secrets:
      FIREBASE_OPTIONS_DART:
        required: true
      GOOGLE_SERVICES_JSON: # If provided, will build for android
        required: false
      GOOGLE_SERVICE_INFO_PLIST: # If provided, will build for iOS
        required: false
      FIREBASE_SERVICE_ACCOUNT: # If provided, will build for iOS
        required: false

# https://medium.com/@colonal/automating-flutter-builds-and-releases-with-github-actions-77ccf4a1ccdd
jobs:
  build:
    uses: Womotaq/github_actions/.github/workflows/flutter_checks.yaml@main
    secrets:
      FIREBASE_OPTIONS_DART: ${{ secrets.FIREBASE_OPTIONS_DART }}
      GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}

  deploy:
    runs-on: ubuntu-latest # macos-latest if needing an ios build
    needs: build
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: build/web

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}"
          channelId: live
          projectId: womotaq-f
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

      # - name: Extract version from pubspec.yaml
      #   id: extract_version
      #   run: |
      #     version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
      #     echo "VERSION=$version" >> $GITHUB_ENV

      # - name: Check if Tag Exists
      #   id: check_tag
      #   run: |
      #     git fetch --tags
      #     if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
      #       echo "exists=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "exists=false" >> $GITHUB_OUTPUT
      #     fi

      # - name: Modify Tag
      #   if: steps.check_tag.outputs.exists == 'true'
      #   id: modify_tag
      #   run: |
      #     new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
      #     echo "VERSION=$new_version" >> $GITHUB_ENV

      # - name: Create Git tag
      #   id: create_tag
      #   run: |
      #     git config user.name "github-actions[bot]"
      #     git config user.email "github-actions[bot]@users.noreply.github.com"
      #     git tag -a "v${VERSION}" -m "Release v${VERSION}"
      #     git push origin "v${VERSION}"
